plugins {
  id "java"
	id "fabric-loom" version "${loom_version}"
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "com.github.breadmoirai.github-release" version "2.2.12"
	id 'org.cadixdev.licenser' version '0.6.1'
	id "org.ajoberstar.grgit" version "4.1.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "checkstyle"
	id "com.modrinth.minotaur" version "1.2.1"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

def ENV = System.getenv()

def version_tag = project.mod_name.replaceAll('-', '_') + '_version'

loom {
	mixin.defaultRefmapName = project.mod_name + "-refmap.json"
	accessWidenerPath = file("src/main/resources/${project.mod_name}.accesswidener")
}

def artifact_name = project.mod_name + "-fabric-" + project.mc_tag

project.archivesBaseName = artifact_name

if (grgit == null) {
	project.version = '99.0.0-nogit'
} else if (project.hasProperty(version_tag)) {
	if (grgit.status().isClean()) {
		project.version = project.getProperty(version_tag) + '.' + grgit.log().size()
	} else {
		project.version = project.getProperty(version_tag) + '.' + (grgit.log().size() + 1) + '-snapshot'
	}
} else {
	project.version = '99.0.0-local'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

license {
	header rootProject.file("../HEADER")
	include "**/*.java"
}

checkstyle {
	configFile = rootProject.file("../checkstyle.xml")
	toolVersion = "8.44"
}

def eclipseName = project.mod_name;

eclipse {
	project {
		name = eclipseName;
	}
}

tasks.withType(JavaCompile) {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

jar {
	from "../LICENSE"
	manifest
			{
				attributes "Implementation-Title": project.archivesBaseName
				attributes "Implementation-Version": project.version
				attributes "Maven-Artifact": "${group}:${project.archivesBaseName}:${project.version}"
				attributes "Built-On-Minecraft": "${project.minecraft_version}"
				attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
			}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
	manifest
			{
				attributes "Implementation-Title": project.archivesBaseName + "-sources"
				attributes "Implementation-Version": project.version
				attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:sources"
				attributes "Built-On-Minecraft": "${project.minecraft_version}"
				attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
			}
}

sourceSets {
	main {
		java {
			srcDirs = ['../src/main/java', 'src/main/java']
			include '**/*'
			exclude '*.DS_Store'
		}
		resources {
			srcDirs = ['../src/main/resources', 'src/main/resources']
			include '**/*'
			exclude '*.DS_Store'
		}
	}
	test {
		java {
			exclude '**/*'
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = artifact_name;
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				classifier = "sources"
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()
        maven {
            url = 'sftp://maven.vram.io:22'
            credentials {
            	if (project.hasProperty('maven_user')){
					username = project.getProperty('maven_user')
				}
				if (project.hasProperty('maven_password')){
					password = project.getProperty('maven_password')
				}
            }
        }
	}
}

githubRelease {
	token project.hasProperty("github_releases_token") ? project.github_releases_token : ""
	if (project.hasProperty("github_repository_owner")) {
		owner project.github_repository_owner
	}
	if (project.hasProperty("github_repository")) {
		repo project.github_repository
	}

	body changelog()

	tagName project.mc_tag + "-" + project.version + "-unstable"
	targetCommitish { grgit.branch.current().name }
	releaseName project.version + " Unstable"
	prerelease true
	releaseAssets = remapJar
}

curseforge {
	if(project.hasProperty("curseforge_api_key")) {
		apiKey = project.properties.curseforge_api_key
	}

	if(project.hasProperty("curseforge_id")) {
		project {
			id = project.properties.curseforge_id
			//releaseType = project.release_type
			releaseType = "beta"
			addGameVersion project.release_version
			addGameVersion "Fabric"
			changelog = "A changelog can be found at https://github.com/${github_repository_owner}/${github_repository}/commits"

			mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {

				if(project.hasProperty("required_dep_slugs") || project.hasProperty("embedded_lib_slugs") || project.hasProperty("optional_dep_slugs") || project.hasProperty("compatible_tool_slugs") || project.hasProperty("incompatible_slugs")) {
					relations {
						if(project.hasProperty("required_dep_slugs")) {
							project.required_dep_slugs.split(", ").each { String slug ->
								requiredDependency slug
							}
						}

						if(project.hasProperty("embedded_lib_slugs")) {
							project.embedded_lib_slugs.split(", ").each { String slug ->
								embeddedLibrary slug
							}
						}

						if(project.hasProperty("optional_dep_slugs")) {
							project.optional_dep_slugs.split(", ").each { String slug ->
								optionalDependency slug
							}
						}

						if(project.hasProperty("compatible_tool_slugs")) {
							project.compatible_tool_slugs.split(", ").each { String slug ->
								tool slug
							}
						}

						if(project.hasProperty("incompatible_slugs")) {
							project.incompatible_slugs.split(", ").each { String slug ->
								incompatible slug
							}
						}
					}
				}
			}

			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}
		
		options {
			forgeGradleIntegration = false
		}
	}
}

apply from: 'dependencies.gradle'

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth (type: TaskModrinthUpload){ // Make sure it runs after build!
    if (project.hasProperty("modrinth_token")) {
		token = project.modrinth_token
		projectId = 'VOYxIjFI'
		versionName = 'fabric-' + project.mc_tag + '-' + project.version
		versionNumber = 'fabric-' + project.mc_tag + '-' + project.version // Will fail if Modrinth has this version already
		versionType = 'BETA'
		// On fabric, use 'remapJar' instead of 'jar'
		uploadFile = remapJar // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
		addGameVersion('1.17.1') // Call this multiple times to add multiple game versions. There are tools that can help you generate the list of versions
		addLoader('fabric')
	}
}
